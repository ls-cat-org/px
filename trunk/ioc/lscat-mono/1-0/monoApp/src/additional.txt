	when(((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && chEnWrkng == 1) {
	      sprintf(msgQ,  "**Change-Energy working."); efSet(msg_f); epicsThreadSleep(0.001);
              printf("state mntr: Change-Energy working.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when (((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && centrWrkng == 1) {
	      sprintf(msgQ,  "**Center-Beam working."); efSet(msg_f); epicsThreadSleep(0.001);
	      printf("state mntr: Center-Beam script is working.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when (((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && MKRunPrg == 1) {
	      sprintf(msgQ,  "**Masks moving."); efSet(msg_f); epicsThreadSleep(0.001);
	      printf("state mntr: Masks moving.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when (((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && (DSyRunPrg == 1 || DSxRunPrg == 1)) {
	      sprintf(msgQ,  "**DS slit moving."); efSet(msg_f); epicsThreadSleep(0.001);
	      printf("state mntr: DS slit moving.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when (((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && VFMRunPrg == 1) {
	      sprintf(msgQ,  "**VFM moving."); efSet(msg_f); epicsThreadSleep(0.001);
	      printf("state mntr: VFM moving.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when (((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && TBvRunPrg == 1) {
	      sprintf(msgQ,  "**MD2 Table moving."); efSet(msg_f); epicsThreadSleep(0.001);
	      printf("state mntr: MD2 Table moving.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when (((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) && (DTvRunPrg == 1 || DTlpRunPrg == 1)) {
	      sprintf(msgQ,  "**Detector moving."); efSet(msg_f); epicsThreadSleep(0.001);
	      printf("state mntr: Detector moving.\n");
	      vfmInBtn = 0;  pvPut(vfmInBtn);  epicsThreadSleep(0.001);
	      efClear(vfmin_f); epicsThreadSleep(0.001);
	      vfmOutBtn = 0;  pvPut(vfmOutBtn);  epicsThreadSleep(0.001);
	      efClear(vfmout_f); epicsThreadSleep(0.001);
	} state mntr
	when ((efTest(vfmin_f) && vfmInBtn == 1) || (efTest(vfmout_f) && vfmOutBtn == 1)) {
	      /* save parameters for undo-prg to use */
	      pvGet(attUnit);    epicsThreadSleep(0.001);    startAttUnit = attUnit;
	      pvGet(attAct);     epicsThreadSleep(0.001);    startAtt  =  attAct;
	      pvGet(actMKys);    epicsThreadSleep(0.001);    startMKys = actMKys;
              pvGet(actDSyc);    epicsThreadSleep(0.001);    startDSyc = actDSyc;
	      pvGet(actDSys);    epicsThreadSleep(0.001);    startDSys = actDSys;
	      pvGet(actDSxs);    epicsThreadSleep(0.001);    startDSxs = actDSxs;
	      pvGet(actKBvy);    epicsThreadSleep(0.001);    startVFMh = actKBvy;
	      pvGet(actTBh);     epicsThreadSleep(0.001);    startTBh  =  actTBh;
	      pvGet(actTBa);     epicsThreadSleep(0.001);    startTBa  =  actTBa;
	      pvGet(DTdAct);     epicsThreadSleep(0.001);    startDTd  =  DTdAct;
	      pvGet(DThAct);     epicsThreadSleep(0.001);    startDTh  =  DThAct;
	      pvGet(DTxAct);     epicsThreadSleep(0.001);    startDTx  =  DTxAct;
	      pvGet(DTvdsOff);   epicsThreadSleep(0.001);    startDTvOff = DTvdsOff;
	      pvGet(DTvCorAng);  epicsThreadSleep(0.001);    startDTav = DTvCorAng;
	      pvGet(DTvCorSh);   epicsThreadSleep(0.001);    startDTsv = DTvCorSh;
	      preFdbk = 0;
              if (vfmInBtn == 1) {
		  preHtchSh = 1; preAttUnit   = 0;   preAtt = attIn;
		  preMKys = 1.0; preDSys = 10.0; preDSxs = 10.0;
		  runDSyc = dsHi; runVFMh = vfmHi;  runTBh = tbHi; runTBa = tbAi;
                  postDTvOff = dtOfIn; postDTvAng = dtAnIn; postDTvSh = dtShIn;
	          efClear(vfmin_f); epicsThreadSleep(0.001);
	          sprintf(msgQ,  "Prepare to move IN."); efSet(msg_f); epicsThreadSleep(0.001);
                  printf("Prepare to move IN.\n");
	          efSet(movevfm_f); epicsThreadSleep(0.001);
                  printf("state mntr: raising movevfm flag, leaving mntr-state.\n");
	      }
	      else if (vfmOutBtn == 1) {
		  preHtchSh = 1; attUnit   = 0;   preAtt = attOut;
		  preMKys = 2.0; preDSys = 0.2;  preDSxs = 0.7;
		  runDSyc = dsHo; runVFMh = vfmHo;  runTBh = tbHo; runTBa = tbAo;
                  postDTvOff = dtOfOut; postDTvAng = dtAnOut; postDTvSh = dtShOut;
	          efClear(vfmout_f); epicsThreadSleep(0.001);
	          sprintf(msgQ,  "Prepare to move OUT."); efSet(msg_f); epicsThreadSleep(0.001);
                  printf("Prepare to move OUT.\n");
	          efSet(movevfm_f); epicsThreadSleep(0.001);
                  printf("state mntr: raising movevfm flag, leaving mntr-state.\n");
	      }
              else  {
	          sprintf(msgQ,  "Unknown flag. Abort."); efSet(msg_f); epicsThreadSleep(0.001);
                  printf("Unknown flag. Abort.\n");
		  abortBtn = 1;   pvPut(abortBtn);  epicsThreadSleep(0.001);
	      }
	} state mntr
